import requests
import json
from typing import Optional, Generator, Union, Dict, Any


def call_model_non_stream(
    system_prompt: str, user_prompt: str, format: Optional[Dict[str, Any]] = None
) -> str:
    """
    Call the Bielik model via Ollama API in non-streaming mode.

    Sends a request to the local Ollama server with system and user prompts,
    optionally specifying a response format. Returns the complete response
    as a single string.

    Args:
        system_prompt: System prompt defining the model's behavior
        user_prompt: User's input/question
        format: Optional structured output format specification

    Returns:
        Model's response as a string, or error message if the request fails
    """
    url = "http://localhost:11434/api/generate"

    data = {
        "model": "Bielik-11B-v2_6-Instruct_Q4_K_M",
        "system": system_prompt,
        "prompt": user_prompt,
        "stream": False,
        "format": format,
    }

    try:
        response = requests.post(url, json=data)
        response.raise_for_status()

        json_response = response.json()
        return json_response.get("response", "")

    except requests.exceptions.RequestException as e:
        return f"Error connecting to Ollama API: {e}"
    except Exception as e:
        return f"Unexpected error: {e}"


def call_model_stream(
    system_prompt: str, user_prompt: str
) -> Generator[str, None, None]:
    """
    Call the Bielik model via Ollama API in streaming mode.

    Sends a request to the local Ollama server and yields response chunks
    as they become available. This allows for real-time streaming of the
    model's response.

    Args:
        system_prompt: System prompt defining the model's behavior
        user_prompt: User's input/question

    Yields:
        Response chunks as strings as they are generated by the model
    """
    url = "http://localhost:11434/api/generate"

    data = {
        "model": "Bielik-11B-v2_6-Instruct_Q4_K_M",
        "system": system_prompt,
        "prompt": user_prompt,
        "stream": True,
    }

    try:
        response = requests.post(url, json=data, stream=True)
        response.raise_for_status()

        for line in response.iter_lines():
            if line:
                try:
                    json_response = json.loads(line.decode("utf-8"))
                    if "response" in json_response:
                        yield json_response["response"]

                    # Check if the response is done
                    if json_response.get("done", False):
                        break

                except json.JSONDecodeError:
                    continue

    except requests.exceptions.RequestException as e:
        yield f"Error connecting to Ollama API: {e}"
    except Exception as e:
        yield f"Unexpected error: {e}"
